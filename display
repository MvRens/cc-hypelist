os.loadAPI("api/x2monitor")

print("Attempting to find monitor")
local peripheralList = peripheral.getNames()
local monitorName = ""

for index = 1, #peripheralList do
  if peripheral.getType(peripheralList[index]) == "monitor" then
    monitorName = peripheralList[index]
    break
  end
end

if monitorName == "" then
  print("No monitor found, aborting!")
  do return end
end

print("Found monitor: " .. monitorName)

print("Hypelist Monitor running")
print(": "..tostring(hypelist.getCount()).." entries loaded")

local monitor = x2monitor.wrap(monitorName)
monitor.clear()
monitor.pushColorState()
  -- Rainbow!
  monitor.setBackgroundColor(colors.red)
  monitor.setCursorPos(1, 1)
  monitor.textBox("")
  
  monitor.setBackgroundColor(colors.orange)
  monitor.textBox("", { x = 2, width = monitor.width - 2 })
  
  monitor.setBackgroundColor(colors.yellow)
  monitor.textBox("", { x = 3, width = monitor.width -  4 })
  
  monitor.setBackgroundColor(colors.green)
  monitor.textBox("", { x = 4, width = monitor.width -  6 })
  
  monitor.setBackgroundColor(colors.blue)
  monitor.textBox("", { x = 5, width = monitor.width - 8 })
  
  monitor.setBackgroundColor(colors.purple)
  monitor.textBox("", { x = 6, width = monitor.width - 10 })
  
  monitor.setBackgroundColor(colors.magenta)
  monitor.textBox("", { x = 7, width = monitor.width - 12 })
  
  monitor.setTextColor(colors.black)
  monitor.textCentered("TECHNICOLOR HYPE LIST", 1, false)
monitor.popColorState()


local listYStart = 3
local itemsSinglePage = monitor.height - (listYStart - 1)
local itemsPerPage = itemsSinglePage - 2
local currentPage = 0
local pageCount = 0

local startPos = 0
local endPos = 0
local isMultiPage = false

function recalculate(items)
  endPos = #items
  pageCount = 1

  if (endPos > itemsSinglePage) then
    -- Apply pagination
    startPos = currentPage * itemsPerPage
    while (startPos > 0 and startPos >= #items) do
      startPos = startPos - itemsPerPage
    end

    endPos = startPos + itemsPerPage
    if (endPos >= #items) then
      endPos = #items
    end

    pageCount = math.ceil(#items / itemsPerPage)
  end

  isMultiPage = (pageCount > 1)
end


function outputList(items)
  local currentPos = 0
  local currentY = listYStart

  for key, value in pairs(hypelist.getList()) do
    if (currentPos >= startPos and currentPos < endPos) then
      monitor.setCursorPos(1, currentY)
    
      -- Checkbox
      monitor.write("[")
      monitor.pushColorState()
        monitor.setTextColor(colors.green)
        
        if (value.done) then
          monitor.write("V")
        else
          monitor.write(" ")
        end
      monitor.popColorState()
      monitor.write("] ")

      -- Text    
      monitor.textBox(value.text, { width = monitor.width - 6 })

      if (value.done) then    
        monitor.pushColorState()
          monitor.setTextColor(colors.red)
          monitor.write(" X")
        monitor.popColorState()
      else
        monitor.write("  ")
      end

      currentY = currentY + 1
    end
  
    currentPos = currentPos + 1
  end
  
  local clearTo = monitor.height
  if (isMultiPage) then
    clearTo = clearTo - 1
  end

  -- Clear remaining lines  
  for remainingY = currentY, clearTo, 1 do
    monitor.setCursorPos(1, remainingY)
    monitor.clearLine()
  end
end


function outputPageButtons(items)
  monitor.pushColorState()
    monitor.setTextColor(colors.lightGray)
    monitor.textCentered("Page "..tostring(currentPage + 1).." of "..tostring(pageCount), monitor.height, true)
  monitor.popColorState()

  if (currentPage > 0) then
    monitor.setCursorPos(1, monitor.height)
    monitor.write("[")
    monitor.pushColorState()
      monitor.setTextColor(colors.lightGray)
      monitor.write("<")
    monitor.popColorState()
    monitor.write("]")
  end

  if (currentPage < pageCount - 1) then
    monitor.setCursorPos(monitor.width - 3, monitor.height)
    monitor.write("[")
    monitor.pushColorState()
      monitor.setTextColor(colors.lightGray)
      monitor.write(">")
    monitor.popColorState()
    monitor.write("]")
  end
end


function updateList()
  local items = hypelist.getList()

  recalculate(items)
  outputList(items)

  if (isMultiPage) then
    outputPageButtons(items)
  end
end


function touch(x, y)
  if (isMultiPage and y == monitor.height) then
    if (x <= 5) then
      if (currentPage > 0) then
        print(": Touched previous page button")
        currentPage = currentPage - 1
        updateList()
      end
    elseif (x >= monitor.width - 5) then
      if (currentPage < pageCount - 1) then
        print(": Touched next page button")
        currentPage = currentPage + 1
        updateList()
      end
    end
  else
    local index = (y - listYStart) + 1
    print(": Touched "..tostring(x)..","..tostring(y).." - list index "..tostring(index + startPos))

    local itemsShowing = itemsSinglePage
    if (isMultiPage) then
      itemsShowing = itemsPerPage
    end

    if (index > 0 and index <= itemsShowing) then
      index = index + startPos

      if (x >= monitor.width - 1 and hypelist.isDone(index)) then
        print(": Index valid, deleting")
        hypelist.delete(index)
      else
        print(": Index valid, toggling")
        hypelist.toggleDone(index)
      end
    else
      print(": Index invalid")
    end
  end
end


updateList()


while true do
  local event, param1, param2, param3 = os.pullEvent()
  
  if (event == "hypelist") then
    print(": Hypelist updated, refreshing")
    updateList()
  elseif (event == "monitor_touch") then
    touch(param2, param3)    
  end
end